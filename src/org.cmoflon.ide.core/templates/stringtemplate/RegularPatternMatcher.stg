AllMatches(engine, importManager, body, chain) ::= <<
match_t* _result;
if((_result = memb_alloc(&memb_<body.header.name><adornment>)) == NULL)
  printf("ERROR[topologycontrol]: match list is full (%s:%d)\n", __FILE__, __LINE__);
else {
  _result->match = (void**) malloc(<length(body.header.internalSymbolicParameters)>*sizeof(void*));
  if(_result->match == NULL){
    printf("ERROR[topologycontrol]: could not allocate memory (%s:%d)\n", __FILE__, __LINE__);
    break;
  }else{
  <body.header.internalSymbolicParameters:{x  |_result->match[<i0>]=<if(x.Type.LinkedElement.EClassIsBuiltIn)>&<x:/democles/Name(importManager)>;<\n><else><x:/democles/Name(importManager)>;<\n><endif>}>
  list_add(list_matches_<body.header.name><adornment>, _result);
  }
}
>>

SingleMatch(engine, importManager, body, chain) ::= <<
void** _result = (void**) malloc(<length(body.header.internalSymbolicParameters)>*sizeof(void*));
if(_result == NULL){
  printf("ERROR[topologycontrol]: could not allocate memory (%s:%d)\n", __FILE__, __LINE__);
  return NULL;
}else{
  <body.header.internalSymbolicParameters:{x  |_result[<i0>]= <if(x.Type.LinkedElement.EClassIsBuiltIn)>&<x:/democles/Name(importManager)>;<\n><else><x:/democles/Name(importManager)>;<\n><endif>}>
  return _result;
}
>>

MatchSingleMethod(engine, importManager, body, adornment, boundSymbolicParameters, chain, alwaysSuccessful) ::= <<
static void** <body.header.name><adornment>(<boundSymbolicParameters:{x |<if(x.Type.LinkedElement.EClassIsBuiltIn)><x.Type.LinkedElement.name><else><x.Type.LinkedElement.Name;format="fulluppercase">_T*<endif> <x:/democles/Name(importManager)>};separator=", ">) {
  #ifdef CMOFLON_PRINT_PATTERN_INVOCATION
  printf("<body.header.name>");
  #endif
  <if (chain)><(chain.value.template)(engine, importManager, body, chain)>
<if (!alwaysSuccessful)>return NULL;<endif>
<else><SingleMatch(engine, importManager, body, chain)>
  <endif>
}
>>

MatchAllMethod(engine, importManager, body, adornment, boundSymbolicParameters, chain, alwaysSuccessful) ::= <<
static list_t <body.header.name><adornment>(<boundSymbolicParameters:{x| <if(x.Type.LinkedElement.EClassIsBuiltIn)><x.Type.LinkedElement.name><else><x.Type.LinkedElement.Name;format="fulluppercase">_T*<endif> <x:/democles/Name(importManager)>};separator=", ">) {
  #ifdef CMOFLON_PRINT_PATTERN_INVOCATION
  printf("<body.header.name>");
  #endif
  <if (chain)><(chain.value.template)(engine, importManager, body, chain)>
  <else>if((_result = memb_alloc(&memb_<body.header.name><adornment>)) == NULL) {
      printf("ERROR[topologycontrol]: match-list is full (%s:%d)\n", __FILE__, __LINE__);
  }else {
    _result->match = (void**) malloc(<length((boundSymbolicParameters))>*sizeof(void*))
    if(_result == NULL){
      printf("ERROR[topologycontrol]: could not allocate memory (%s:%d)\n", __FILE__, __LINE__);
      break;
    }else{
      <boundSymbolicParameters:{x  |_result->match[<i0>]= <x:/democles/Name(importManager)>;<\n>}>
      list_add(list_matches_<body.header.name><adornment>, _result);<endif>
    }
  return list_matches_<body.header.name><adornment>;
}
>>