PatternCall(engine, importManager, body, chain) ::= <<
void** result_<chain.value.operation.origin.type.invokedPattern.name> = <chain.value.operation.origin.type.invokedPattern.name><chain.value.operation.precondition>(<chain.value.operation.boundParameters:/democles/ParameterName(importManager); separator=", ">);
if (result_<chain.value.operation.origin.type.invokedPattern.name> != NULL) {
  <chain.value.operation:WriteFreeVariables(importManager)>
  free(result_<chain.value.operation.origin.type.invokedPattern.name>);
  <if (chain.next)><(chain.next.value.template)(engine, importManager, body, chain.next)><endif>
}

>>

WriteFreeVariables(operation, importManager) ::= <<
<operation.parameters,operation.precondition.rawBindingInformation:{ variable,binding | <if(binding.isFree)><variable:/democles/ParameterType(importManager)> <variable:/democles/ParameterName(importManager,false)> = (<variable:/democles/ParameterType(importManager)>) result_<operation.origin.type.invokedPattern.name>[<i0>];
<endif> }>
>>