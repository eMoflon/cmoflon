#Set to 'true' if dropping unidirectional edges is desired 
tc.dropUnidirectionalEdges = true

# Set to True if you want to use hopcounts.
tc.enableHopcountProcess = false

# You may also override this behavior for individual algorithms by using the property prefix 'tc.enableHopCountProcessFor.'.
# (e.g., tc.enableHopCountProcessFor.LStarKtcAlgorithm = true)

# Set number of matches allowed per foreach invocation
pm.maxmatches = 20

# Sets the minimum ID to use as preprocessor constant for the generated TC algorithms (default: 1000)
tc.minId=1000

# Place the names of the topology control algorithms to use as CSV (e.g., tc.algorithms=KtcAlgorithm,LStarKtcAlgorithm)
tc.algorithms = MyTopologyControlAlgorithm

# Place the parameters for the topology control algorithm call here as CSV
# (e.g., tc.parametersOf.KtcAlgorithm=const-k

# It is also possible to define constants. A constant declaration must look as follows: const-[constname]
# (e.g., const-k=3.0)
const-updateinterval=300


#  Type mapping definitions follow 
# The Key is the EClass, and the value is the C Struct you want it to be mapped to.
# Default: mappingOf.Node = networkaddr_t and mappingOf.Link = neighbor_t
mappingOf.Node=networkaddr_t
mappingOf.Link=neighbor_t

