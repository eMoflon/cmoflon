BackwardExtendToMany(engine, importManager, body, chain) ::= <<
for (<importManager.(chain.value.operation.type.linkedElement.genModelElement.genClass.typeName)> <if (first(chain.value.operation.postcondition).isNotTypeChecked)>tmp<first(chain.value.parameters).specification.name; format="uppercase"><else><first(chain.value.parameters).specification.name; format="lowercase"><endif> : <first(rest(chain.value.operation.parameters)).specification.name; format="lowercase">.<chain.value.operation.type.linkedElement.genModelElement.reverse.getAccessor>()) {
	<(chain.next.value.template)(engine, importManager, body, chain.next)>
}
>>

BackwardExtendToOne(engine, importManager, body, chain) ::= <<
<importManager.(chain.value.operation.type.linkedElement.genModelElement.genClass.typeName)> <if (first(chain.value.operation.postcondition).isNotTypeChecked)>tmp<first(chain.value.operation.parameters).specification.name; format="uppercase"><else><first(chain.value.operation.parameters).specification.name; format="lowercase"><endif> = <first(rest(chain.value.parameters)).specification.name; format="lowercase">.<chain.value.operation.type.linkedElement.genModelElement.reverse.getAccessor>();
<(chain.next.value.template)(engine, importManager, body, chain.next)>
>>

CheckToMany(engine, importManager, body, chain) ::= <<
if (<first(chain.value.operation.parameters).specification.name; format="lowercase">.<chain.value.operation.type.linkedElement.genModelElement.getAccessor>().contains(<first(rest(chain.value.operation.parameters)).specification.name; format="lowercase">)) {
	<(chain.next.value.template)(engine, importManager, body, chain.next)>
}
>>

CheckToOne(engine, importManager, body, chain) ::= <<
if (<first(rest(chain.value.operation.parameters)).specification.name; format="lowercase">.equals(<first(chain.value.operation.parameters).specification.name; format="lowercase">.<chain.value.operation.type.linkedElement.genModelElement.getAccessor>()) {
	<(chain.next.value.template)(engine, importManager, body, chain.next)>
}
>>

ForwardExtendToMany(engine, importManager, body, chain) ::= <<
for (<importManager.(chain.value.operation.type.returnType)> <if (first(rest(chain.value.operation.postcondition)).isNotTypeChecked)>tmp<first(rest(chain.value.operation.parameters)).specification.name; format="uppercase"><else><first(rest(chain.value.operation.parameters)).specification.name; format="lowercase"><endif> : <first(chain.value.operation.parameters).specification.name; format="lowercase">.<chain.value.operation.type.linkedElement.genModelElement.getAccessor>()) {
	<(chain.next.value.template)(engine, importManager, body, chain.next)>
}
>>

ForwardExtendToOne(engine, importManager, body, chain) ::= <<
<importManager.(chain.value.operation.type.returnType)> <if (first(rest(chain.value.operation.postcondition)).isNotTypeChecked)>tmp<first(rest(chain.value.operation.parameters)).specification.name; format="uppercase"><else><first(rest(chain.value.operation.parameters)).specification.name; format="lowercase"><endif> = <first(chain.value.operation.parameters).specification.name; format="lowercase">.<chain.value.operation.type.linkedElement.genModelElement.getAccessor>();
<(chain.next.value.template)(engine, importManager, body, chain.next)>
>>

TypeCheck(engine, importManager, body, chain) ::= <<
if (tmp<first(chain.value.operation.parameters).specification.name; format="uppercase"> instanceof <importManager.(chain.value.operation.type)>) {
	<importManager.(chain.value.operation.type)> <first(chain.value.operation.parameters).specification.name; format="lowercase"> = (<importManager.(chain.value.operation.type.typeName)>) tmp<first(chain.value.operation.parameters).specification.name; format="uppercase">;
	<(chain.next.value.template)(engine, importManager, body, chain.next)>
}
>>

InvokeOperation(engine, importManager, body, chain) ::= <<
<if (chain.value.operation.type.linkedElement.eType)><importManager.(chain.value.operation.type.linkedElement.genModelElement.genClass.typeName)> <first(chain.value.operation.parameters).specification.name; format="lowercase"> = <first(rest(chain.value.operation.parameters)).specification.type.linkedElement.name; format="fulllowercase">_<chain.value.operation.type.linkedElement.genModelElement.name>(<first(rest(chain.value.operation.parameters)).specification.name; format="lowercase">,<rest(rest(chain.value.operation.parameters)).specification.name; format="lowercase"; separator=", ">)<else><first(chain.value.operation.parameters).specification.name; format="lowercase">.<chain.value.operation.type.linkedElement.genModelElement.name>(<rest(chain.value.operation.parameters).specification.name; format="lowercase"; separator=", ">)<endif>
<(chain.next.value.template)(engine, importManager, body, chain.next)>
>>